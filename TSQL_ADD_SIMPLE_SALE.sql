USE TSQL_ASSIGNMENT;
GO

IF OBJECT_ID('ADD_SIMPLE_SALE') IS NOT NULL
DROP PROCEDURE ADD_SIMPLE_SALE;
GO 

CREATE PROCEDURE ADD_SIMPLE_SALE @PCUSTID INT, @PPRODID INT, @PQTY INT AS 
BEGIN
    BEGIN TRY
        IF @PQTY < 1 OR @PQTY > 999
            THROW 50140, 'Sale Quantity outside valid range', 1
        
        DECLARE @STATUS NVARCHAR(100);
        SELECT @STATUS = STATUS FROM CUSTOMER WHERE CUSTID = @PCUSTID;
        IF @STATUS != 'OK'
            THROW 50150, 'Customer status is not OK', 1
        
        IF NOT EXISTS (SELECT 1 FROM CUSTOMER WHERE CUSTID = @PCUSTID)
            THROW 50160, 'Customer ID not found', 1

        IF NOT EXISTS (SELECT 1 FROM PRODUCT WHERE PRODID = @PPRODID)
            THROW 50170, 'Product ID not found', 1

        INSERT INTO SALE (CUSTID, PRODID, QTY)
        VALUES (@PCUSTID, @PPRODID, @PQTY);

        DECLARE @PRODPRICE MONEY;
        SELECT @PRODPRICE = SELLING_PRICE FROM PRODUCT WHERE PRODID = @PPRODID;

        UPDATE PRODUCT SET SALES_YTD *= @PRODPRICE WHERE CUSTIS = @PPRODID
    END TRY
    BEGIN CATCH
    IF ERROR_MESSAGE() = 50140
        THROW
    ELSE IF ERROR_MESSAGE() = 50150
        THROW
    ELSE IF ERROR_MESSAGE() = 50160
        THROW
    ELSE IF ERROR_MESSAGE() = 50170
        THROW
    ELSE
        BEGIN
            DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
            THROW 50000, @ERRORMESSAGE, 1
        END; 
    END CATCH
END;
GO

EXEC ADD_SIMPLE_SALE @PCUSTID = 1, @PPRODID = 0, @PQTY = 0, @PDATE = "DATE";