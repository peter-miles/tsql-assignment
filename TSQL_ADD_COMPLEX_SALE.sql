USE TSQL_ASSIGNMENT;
GO

IF OBJECT_ID('ADD_COMPLEX_SALE') IS NOT NULL
DROP PROCEDURE ADD_COMPLEX_SALE;
GO 

CREATE PROCEDURE ADD_COMPLEX_SALE @PCUSTID INT, @PPRODID INT, @PQTY INT, @PDATE NVARCHAR(100) AS 
BEGIN
    BEGIN TRY
        IF @PQTY < 1 OR @PQTY > 999
            THROW 50230, 'Sale Quantity outside valid range', 1
        
        DECLARE @STATUS NVARCHAR(100);
        SELECT @STATUS = STATUS FROM CUSTOMER WHERE CUSTID = @PCUSTID;
        IF @STATUS != 'OK'
            THROW 50240, 'Customer status is not OK', 1

        IF LEN(@PDATE) != 8
            THROW 50250, 'Date not valid', 1
        
        IF NOT EXISTS (SELECT 1 FROM CUSTOMER WHERE CUSTID = @PCUSTID)
            THROW 50260, 'Customer ID not found', 1

        IF NOT EXISTS (SELECT 1 FROM PRODUCT WHERE PRODID = @PPRODID)
            THROW 50270, 'Product ID not found', 1  

        INSERT INTO SALE (SALEID, CUSTID, PRODID, QTY, SALEDATE)
        VALUES (SALE_SEQ, @PCUSTID, @PPRODID, PQTY, SALEDATE);
    END TRY
    BEGIN CATCH
    IF ERROR_MESSAGE() = 50230
        THROW
    ELSE IF ERROR_MESSAGE() = 50240
        THROW
    ELSE IF ERROR_MESSAGE() = 50250
        THROW
    ELSE IF ERROR_MESSAGE() = 50260
        THROW
    ELSE IF ERROR_MESSAGE() = 50270
        THROW
    ELSE
        BEGIN
            DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
            THROW 50000, @ERRORMESSAGE, 1
        END; 
    END CATCH
END;
GO

EXEC ADD_COMPLEX_SALE @PCUSTID = 1, @PPRODID = 0, @PQTY = 0, @PDATE = "DATE";